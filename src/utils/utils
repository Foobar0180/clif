#!/bin/sh
#
# Contains various helper functions used by other CLI commands.

. "${CLI_WORKDIR}/src/utils/colors"
. "${CLI_WORKDIR}/src/utils/io"
. "${CLI_WORKDIR}/src/utils/sysfetch"
. "${CLI_WORKDIR}/src/utils/trycatch"

invocation='debugger "Calling: ${FUNCNAME[0]} $*$"' # Use in functions: eval ${invocation}
suppress="false"

#######################################
# Standard error message for unknown commands.
# Arguments:
#   $cmd: The command or option being run.
# Outputs:
#   Prints an error message.
#######################################
unknown_command_message() {
  local cmd="$1"

  echo "Could not execute because the command or option was not found."
  echo "Possible reasons for this include:"
  echo "  * You misspelled a built-in command."
  echo "  * You intended to execute a command but the command $cmd does not exist."
  echo "  * You intended to run a global tool, but a prefixed executable with this name could not be found on the PATH."
  echo "" 
}

#######################################
# Prints an error message in the color red to the terminal.
# Arguments:
#   A user defined message.
# Outputs:
#   Prints a formatted message string substitution with a conversion specification 
#   for converting boolean arguments to the string true or false. All error 
#   messages should go to STDERR. This makes it easier to separate normal 
#   status from actual issues.
#######################################
say_err() {
  if [ $suppress == "false" ]; then
    printf "%b\n" "${COLOR_RED}clif-cli [Error]:${TEXT_NORMAL} ${1}" >&2
  fi
}

#######################################
# Prints a message to the terminal.
# Arguments:
#   A user defined message.
# Outputs:
#   Prints a formatted message string substitution with a conversion specification 
#   for converting boolean arguments to the string true or false.
#######################################
say() {
  # Using stream 3 (defined in the beginning) to not interfere with stdout of 
  # functions which may be used as return value.
  if [ $suppress == "false" ]; then
    printf "%b\n" "${COLOR_CYAN}clif-cli:${TEXT_NORMAL} ${1}" >&3
  fi
}

#######################################
# Creates a log file and appends any debug message to that file. The log file 
# directory is defined by the 'LOGGING_FILES_PATH' value in the profile, and 
# can be set as either 'auto', or a local path. 
#
# If the 'LOGGING_FILES_PATH' value is set as 'auto', then a log file is added 
# to the CLI root log directory.
# Globals:
#   CLI_WORKDIR
#   LOGGING_FILES_PATH
# Arguments:
#   None
# Outputs:
#   Prints a formatted message string substitution with a conversion specification 
#   for converting boolean arguments to the string true or false.
#######################################
debugger() {
  if [ "$CLI_DEBUG" = true ]; then

    # Get the logging path from the named profile.
    local log_path="$CLI_LOGS_PATH"

    # The default config value can be set to 'auto' or be left empty; in which case,
    # the CLI logs all debug messages the CLI root log dicrectory.
    if [ "$log_path" = "auto" ] || [ -z "$log_path" ]; then
      log_path="$CLI_WORKDIR/logs"
    elif [ ! -d "$log_path" ]; then
      say "Creating log directory."

      # Create any parent directories that do not exist as well.   
      mkdir -p $log_path
    fi

    # Assemble the unique log file name and path. A single log file is created 
    # per day with the format cli-debug-20210424.log.
    local entry_date="$( date +"%Y%m%d" )"
    local now="$( date +"%Y%m%d%I%M" )"
    local log_file_name="$log_path/cli-debug-$entry_date.log" 

    echo "${now} ${1}" >> "$log_file_name" # Append to the end of the log file.
  fi
}

#######################################
# Opens a file or URL in the user's preferred application. If a URL is provided 
# the URL will be opened in the user's preferred web browser. If a file is 
# provided the file will be opened in the preferred application for files of 
# that type.
# Arguments:
#   Any file, ftp, http and https URLs.
# Outputs:
#   An exit code of 0 indicates success while a non-zero exit code indicates 
#   failure.
#######################################
open() {
  xdg-open "$@">/dev/null 2>&1
}

#######################################
# Converts any string into its lowercase equivalent.
# Arguments:
#   Any string.
# Outputs:
#   Echos a copy of this string converted to lowercase.
#######################################
to_lowercase() {
  eval ${invocation}

  echo "$1" | tr '[:upper:]' '[:lower:]'
}

#######################################
# Converts any string into its uppercase equivalent.
# Arguments:
#   Any string.
# Outputs:
#   Echos a copy of this string converted to uppercase.
#######################################
to_uppercase() {
  eval ${invocation}

  echo "$1" | tr '[:lower:]' '[:upper:]'
}

#######################################
# Removes all leading and trailing white-space characters from the current 
# string. A nice thing about this solution is that it will work with any 
# POSIX-compliant shell.
# Arguments:
#   The string to be trimmed in quoted form.
# Outputs:
#   Echos a new string in which all leading and trailing occurrences of whitespace 
#   from the current string are removed.
#######################################
trim_whitespace() {
  eval ${invocation}

  echo "$1" | tr -d '[:space:]'
}

#######################################
# Gets a fully qualified path to a given profile within the config directory. 
# If the profile name is not provided as an arg, then the default 
# profile is used.
# Globals:
#   CLI_WORKDIR
#   CLI_PROFILE
# Arguments:
#   $profile_name: Optional. The file name of the profile. Sometimes, provided by
#   the [-p, --profile] arg when running a subcommand.
# Outputs:
#   Echos the absolute path of the profile. An exit code of 0 indicates success 
#   while an exit code of 1 indicates failure.
#######################################
config_path() {
  eval ${invocation}

  local profile_name=$1
  
  # Use the current profile from the global config settings, unless specified 
  # as an argument.
  [ -z "$profile_name" ] && profile_name="$CLI_PROFILE" 

  profile=$( combine_paths "$CLI_WORKDIR/src" "config/$profile_name.settings" )

  # The profile cannot be found, so we exit and print the error
  if [[ ! -f "$profile" ]]; then
    say_err "No such file or directory found: $profile."
    exit 1
  fi

  debugger "Using profile: $profile_name"

  echo $profile
  exit 0 # Success
}