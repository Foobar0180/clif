#!/bin/sh
#
# Create a multi-command CLI.

set -e
. "$CLI_WORKDIR/src/utils/utils"

# We do this to prevent the command from creating an empty option file when no 
# command name is passed.
if [ $# == 0 ]; then
  say_err "A command name must be provided."
  exit 1
fi

new_cmd="$1"

# You can call your CLI command anything you like by replacing the name of your 
# choice.
new_multi_dir="$CLI_WORKDIR/src/command/$new_cmd"

if [[ -d "$new_multi_dir" ]]; then
  say_err "A command $new_cmd already exists at this location. Please choose a different name."
  exit 1
fi

# Your new CLI command is created locally and the relevant code is in the new 
# directory.
mkdir -p "$new_multi_dir"

# Create the new command and help files.

echo "#!/bin/sh

echo \"\"
echo \"USAGE:\"
echo \"  $ clif $new_cmd [commands] [[--] <arguments>]\"
echo \"\"
echo \"COMMANDs:\"
echo \"  hello   Describe the hello command.\"
echo \"  help    Show command line help.\"" >> "$new_multi_dir/help"

# ./hello

echo "#!/bin/sh

echo \"Hello, World!\"" >> "$new_multi_dir/hello"

say "Creating new multi-command $new_cmd ... ${COLOR_GREEN}done${COLOR_NORMAL}"

# Update the permissions mode of the new command files and directory.
"$CLI_WORKDIR/src/command/grant-permission"

exit 0